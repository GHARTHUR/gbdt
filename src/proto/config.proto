/* Copyright 2016 Jiang Chen <criver@gmail.com>
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

syntax = 'proto3';

package gbdt;

message TSVDataConfig {
  repeated string binned_float_column = 1;
  repeated string string_column = 2;
  repeated string raw_float_column = 3;
}

message DataConfig {
  repeated string feature = 1;
  string sample_weight_column = 2;
  TSVDataConfig tsv_data_config = 3;
}

message SplitConfig {
  // The minimum gain to consider split a leaf.
  double min_gain = 1;
  // L2 regularization hyperparameter lambda.
  double l2_lambda = 2;
}

message TreeConfig {
  int32 num_iterations = 1;
  int32 num_leaves = 2;
  float shrinkage = 3;
  SplitConfig split_config = 4;
}

message SamplingConfig {
  float example_sampling_rate = 1;
  float feature_sampling_rate = 2;
}

message RegressionTargetConfig {
  string target_column = 1;
}

message BinaryTargetConfig {
  message StringSet {
    repeated string category = 1;
  }

  string target_column = 1;
  //  If threshold is set, positive labels are determined by target_column > threshold.
  // If category is set, positive labels are determined by target_column in category.
  oneof positivity_test {
    float threshold = 2;
    StringSet category = 3;
  }
}

message PairwiseTargetConfig {
  string target_column = 1;
  string group_column = 2;
  float pair_sampling_rate = 3;
}

message LambdaMartParams {
  float dcg_base = 1;
}

message LossFuncConfig {
  string loss_func = 1;
  oneof target {
    RegressionTargetConfig regression_target = 2;
    BinaryTargetConfig binary_target = 3;
    PairwiseTargetConfig pairwise_target = 4;
  }
  oneof parameter {
    LambdaMartParams lambdamart_params = 5;
  }
}

message EvalConfig {
  int32 eval_interval = 1;
}

message Config {
  TreeConfig tree_config = 1;
  SamplingConfig sampling_config = 2;
  LossFuncConfig loss_func_config = 3;
  DataConfig data_config = 4;
  EvalConfig eval_config = 5;
}