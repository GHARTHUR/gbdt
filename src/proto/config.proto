/* Copyright 2016 Jiang Chen <criver@gmail.com>
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

syntax = 'proto3';

package gbdt;

message DataConfig {
  repeated string float_feature = 1;
  repeated string categorical_feature = 2;
  string weight_column = 3;
  string target_column = 4;
  // Whether the binarize targets into {-1, +1}.
  bool binarize_target = 5;
  // Columns to be loaded in additional to features.
  // These are usually columns needed for loss function computation.
  repeated string additional_float_column = 6;
  repeated string additional_string_column = 7;
}

message SplitConfig {
  // The minimum gain to consider split a leaf.
  double min_gain = 1;
  // L2 regularization hyperparameter lambda.
  double l2_lambda = 2;
}

message TreeConfig {
  int32 num_iterations = 1;
  int32 num_leaves = 2;
  float shrinkage = 3;
  SplitConfig split_config = 4;
}

message SamplingConfig {
  float example_sampling_rate = 1;
  float feature_sampling_rate = 2;
}

message PairwiseConfig {
  string group_column = 1;
  float pair_sampling_rate = 2;
  bool weight_by_delta_target = 3;
}

message LambdaMartConfig {
  float dcg_base = 1;
}

message LossFuncConfig {
  string loss_func = 1;
  PairwiseConfig pairwise_config = 2;
  LambdaMartConfig lambdamart_config = 3;
}

message EvalConfig {
  int32 eval_interval = 1;
}

message Config {
  TreeConfig tree_config = 1;
  SamplingConfig sampling_config = 2;
  LossFuncConfig loss_func_config = 3;
  DataConfig data_config = 4;
  EvalConfig eval_config = 5;
}